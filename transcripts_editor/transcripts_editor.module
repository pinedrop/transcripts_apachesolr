<?php

include_once 'transcripts_editor.index.inc';

function transcripts_editor_init()
{
    $node = menu_get_object();
    if ($node && transcripts_editor_access_check($node)) {
        $editable = TRUE;
        foreach (module_implements('transcripts_editor_disabled') as $module) {
            if (module_invoke($module, 'transcripts_editor_disabled', $node)) {
                $editable = FALSE;
                break;
            }
        }

        if ($editable) {
            drupal_add_js('https://cdnjs.cloudflare.com/ajax/libs/typeahead.js/0.11.1/typeahead.bundle.min.js', array('type' => 'external', 'group' => JS_THEME, 'every_page' => TRUE, 'weight' => -90));
            drupal_add_css('https://cdnjs.cloudflare.com/ajax/libs/x-editable/1.5.1/bootstrap3-editable/css/bootstrap-editable.css', array('type' => 'external', 'group' => CSS_THEME, 'every_page' => TRUE, 'weight' => -80));
            drupal_add_js('https://cdnjs.cloudflare.com/ajax/libs/x-editable/1.5.1/bootstrap3-editable/js/bootstrap-editable.min.js', array('type' => 'external', 'group' => JS_THEME, 'every_page' => TRUE, 'weight' => -80));
            drupal_add_css(drupal_get_path('module', 'transcripts_editor') . '/lib/typeahead.js-bootstrap.css', array('type' => 'file', 'group' => CSS_THEME, 'every_page' => TRUE, 'weight' => -90));
            drupal_add_js(drupal_get_path('module', 'transcripts_editor') . '/lib/typeaheadjs.10x.js', array('type' => 'file', 'group' => JS_THEME, 'every_page' => TRUE, 'weight' => -80));
            drupal_add_css(drupal_get_path('module', 'transcripts_editor') . '/transcripts_editor.css', 'file');
            drupal_add_js(drupal_get_path('module', 'transcripts_editor') . '/js/transcripts_editor.js', 'file');

            $exclude = array();
            foreach (module_implements('transcripts_editor_exclude_tiers') as $module) {
                $exclude = array_merge($exclude, module_invoke($module, 'transcripts_editor_exclude_tiers', $node->nid));
            }
            $exclude = array_unique($exclude);

            drupal_add_js(
                array(
                    'transcripts_editor' => array(
                        'nid' => $node->nid,
                        'exclude' => $exclude,
                        'speaker_displays' => transcripts_ui_speaker_names(),
                        'edit_transcript_link' => 'node/' .$node->nid. '/edit-transcript',
                    ),
                ),
                'setting'
            );
        }
    }
}

function transcripts_editor_access_check($node) {
    //only allowed on page node/x
    return arg(2) == NULL && transcripts_node_has_transcript($node) && node_access('update', $node);
}

function transcripts_editor_menu()
{
    $items = array();

    $items['node/%node/edit-transcript'] = array(
        'title' => 'Transcript',
        'description' => t('Launch transcript editing'),
        'access callback' => TRUE,
        'page callback' => 'transcripts_editor_ajax',
        'page arguments' => array(1),
        'access callback' => 'transcripts_editor_access_check',
        'access arguments' => array(1),
        'type' => MENU_LOCAL_TASK,
        'weight' => 99,
    );
    $items['tcu/up/times'] = array(
        'page callback' => 'transcripts_editor_update_times',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['tcu/up/tier'] = array(
        'page callback' => 'transcripts_editor_update_tier',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['tcu/up/speaker'] = array(
        'page callback' => 'transcripts_editor_update_speaker',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['speakers/%'] = array(
        'page arguments' => array(1),
        'page callback' => 'transcripts_editor_speaker_names',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['tcu/gear'] = array(
        'page callback' => 'transcripts_editor_gear_ops',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    return $items;
}

function transcripts_editor_ajax($nid) {
    //this menu should always be overriden by javascript
    return t('Error. Please return to the previous page.');
}

function transcripts_editor_theme()
{
    return array(
        'transcripts_editor_tcu_gear' => array(
            'path' => drupal_get_path('module', 'transcripts_editor'),
            'file' => 'transcripts_editor.theme.inc',
            'render element' => 'element',
        ),
    );
}

function transcripts_editor_transcripts_ui_tcu_alter(&$tcu)
{
    $tcuid = $tcu['content']['tcu_info']['speaker_name']['#sid'];
    $dropdown = array(
        'gear_menu' => array(
            '#theme' => 'transcripts_editor_tcu_gear',
            '#tcuid' => $tcuid,
            '#actions' => array(
                'insert_before' => t('Insert before'),
                'insert_after' => t('Insert after'),
                'copy_after' => t('Copy after'),
                'remove' => t('Remove'),
            ),
            '#prefix' => "<div id='tcu-gear-{$tcuid}' class='tcu-gear dropdown' data-tcuid='{$tcuid}'>",
            '#suffix' => "</div>",
        ),
    );
    $tcu['content'] = $dropdown + $tcu['content'];
}

function transcripts_editor_gear_ops()
{
    $trid = $_POST['trid'];
    $tcuid = $_POST['tcuid'];
    $start = $_POST['start'];
    $end = $_POST['end'];
    $action = $_POST['action'];
    $tiers = $_POST['tiers'];
    $speaker_tiers = $_POST['speaker_tiers'];

    switch ($action) {
        case 'insert_before':
            $sentence = new stdClass();
            $sentence->sid = 3946;
            $sentence->start = 12;
            $sentence->end = 15;
            $tcu = transcripts_ui_tcu($sentence, 'new-speaker');

            drupal_json_output(array(
                'status' => 'success',
                'data' => array(
                    'action' => 'insert_before',
                    'tcu' => drupal_render($tcu),
                ),
            ));
            break;
        case 'insert_after':
            $tcu = tcu_create(
                array(
                    'trid' => $trid,
                    'start' => $end,
                    'end' => $end + 3,
                    'created' => REQUEST_TIME,
                    'changed' => REQUEST_TIME,
                )
            );
            tcu_save($tcu);
            $tcu->tcuid;
            $tcu->sid = $tcu->tcuid;
            $return = transcripts_ui_tcu($tcu, 'new-speaker');
            drupal_json_output(array(
                'status' => 'success',
                'data' => array(
                    'action' => 'insert_after',
                    'tcu' => drupal_render($return),
                ),
            ));
            break;
        case 'copy_after':
            $sentence = new stdClass();
            $sentence->sid = 3946;
            $sentence->start = 12;
            $sentence->end = 15;
            $tcu = transcripts_ui_tcu($sentence, 'new-speaker');

            drupal_json_output(array(
                'status' => 'success',
                'data' => array(
                    'action' => 'copy_after',
                    'tcu' => drupal_render($tcu),
                ),
            ));
            break;
        case 'remove':
            $sentence = new stdClass();
            $sentence->sid = 3946;
            $sentence->start = 12;
            $sentence->end = 15;
            $tcu = transcripts_ui_tcu($sentence, 'new-speaker');

            drupal_json_output(array(
                'status' => 'success',
                'data' => array(
                    'action' => 'remove',
                    'tcu' => drupal_render($tcu),
                ),
            ));
            break;
    }
}

function transcripts_editor_update_tier()
{
    //get nid that tcu belongs to
    $tcuid = $_POST['pk'];
    list($nid, $trid) = transcripts_apachesolr_parent($tcuid);

    //does user have permissions to update tcu
    if (node_access('update', node_load($nid))) {
        //it would probably be faster to update the column in tcu_tier,
        //and then mark the tcu as needing to be reindexed
        $tcu = tcu_load($tcuid);
        $tcu->setTiers(array_merge($tcu->getTiers(), array($_POST['name'] => $_POST['value'])));
        tcu_save($tcu);

        //flag node as having been edited
        $flag = flag_get_flag('keep_transcript_edits');
        if ($flag && !$flag->is_flagged($nid)) {
            //must override permissions since we do not permit non-programmatic flagging
            $flag->flag('flag', $nid, NULL, TRUE);
        }
    } else {
        drupal_json_output(array(
            'status' => 'error',
            'message' => t('Sorry, you are not permitted to update this data.'),
        ));
    }
}

function transcripts_editor_update_speaker()
{
    //get nid that tcu belongs to
    $tcuid = $_POST['pk'];
    list($nid, $trid) = transcripts_apachesolr_parent($tcuid);

    //does user have permissions to update tcu
    if (node_access('update', node_load($nid))) {
        $tier = $_POST['name'];
        $newValue = $_POST['value'];
        $oldValue = $_POST['oldValue'];
        $speakers = $_POST['speakers'];

        //change speaker of selected line
        $tcu = tcu_load($tcuid);
        $tcu->setSpeakers(array_merge($tcu->getSpeakers(), array($tier => $newValue)));
        tcu_save($tcu);

        //change additional speakers if necessary
        if (!in_array($newValue, $speakers)) {
            $index = array_search($oldValue, $speakers);
            $speakers[$index] = $newValue;
            $result = db_query('SELECT speaker.tcuid From {tcu_speaker} speaker LEFT JOIN {tcu} tcu ON speaker.tcuid = tcu.tcuid WHERE tcu.trid = :trid AND speaker.tier = :tier AND speaker.value = :old', array(':trid' => $trid, ':tier' => $tier, ':old' => $oldValue));
            $tcuids = $result->fetchCol();
            $tcus = tcu_load_multiple($tcuids);
            foreach ($tcus as $tcu) {
                $tcu->setSpeakers(array_merge($tcu->getSpeakers(), array($tier => $newValue)));
                tcu_save($tcu);
            }
        }

        //flag node as having been edited
        $flag = flag_get_flag('keep_transcript_edits');
        if ($flag && !$flag->is_flagged($nid)) {
            //must override permissions since we do not permit non-programmatic flagging
            $flag->flag('flag', $nid, NULL, TRUE);
        }

        drupal_json_output(array(
            'status' => 'success',
            'data' => array(
                'oldValue' => $oldValue,
                'speakers' => $speakers,
                'tcuids' => isset($tcuids) ? $tcuids : array(),
            ),
        ));
    } else {
        drupal_json_output(array(
            'status' => 'error',
            'message' => t('You are not permitted to update this data.'),
        ));
    }
}

function transcripts_editor_update_times()
{
    //get nid that tcu belongs to
    $tcuid = $_POST['pk'];
    list($nid, $trid) = transcripts_apachesolr_parent($tcuid);

    //does user have permissions to update tcu
    if (node_access('update', node_load($nid))) {
        $begin = $_POST['begin'];
        $end = $_POST['end'];

        if ($begin >= $end) {
            drupal_json_output(array(
                'status' => 'error',
                'message' => t('Start time must precede end time.'),
            ));
        }
        else {
            //change timecodes of selected line
            $tcu = tcu_load($tcuid);
            if ($tcu->start != $begin || $tcu->end != $end) {
                $tcu->start = $begin;
                $tcu->end = $end;
                tcu_save($tcu);

                //flag node as having been edited
                $flag = flag_get_flag('keep_transcript_edits');
                if ($flag && !$flag->is_flagged($nid)) {
                    //must override permissions since we do not permit non-programmatic flagging
                    $flag->flag('flag', $nid, NULL, TRUE);
                }

                drupal_json_output(array(
                    'status' => 'success',
                    'data' => array(
                        'begin' => $begin,
                        'end' => $end,
                    ),
                ));
            }
            else {
                drupal_json_output(array(
                    'status' => 'error',
                    'message' => t('No changes made.'),
                ));
            }
        }
    } else {
        drupal_json_output(array(
            'status' => 'error',
            'message' => t('You are not permitted to update this data.'),
        ));
    }
}

/**
 * Implements hook_element_info().
 */
function transcripts_editor_element_info()
{
    $elements = array();
    $elements['managed_file']['#process'][] = 'transcripts_editor_file_field_process';
    return $elements;
}

function transcripts_editor_file_field_process($element, &$form_state, $form)
{
    if (isset($element['#field_name']) && is_transcript_field($element['#field_name'])) {
        $nid = isset($form_state['node']->nid) ? $form_state['node']->nid : 0;

        $flag = flag_get_flag('keep_transcript_edits');
        if ($flag && $flag->is_flagged($nid)) {
            hide($element['remove_button']);
        }
    }
    return $element;
}

function transcripts_editor_speaker_names($tier) {
    //watchdog('TRANSCRIPTS EDITOR', "Tier = $tier", NULL, WATCHDOG_INFO);
    $result = db_query('SELECT DISTINCT value FROM {tcu_speaker} WHERE tier = :tier', array(':tier' => $tier));
    $speaker_names = $result->fetchCol();
    //watchdog('TRANSCRIPTS EDITOR', dprint_r($speaker_names, TRUE), NULL, WATCHDOG_INFO);
    drupal_json_output($speaker_names);
}