<?php

include_once 'transcripts_editor.index.inc';

function transcripts_editor_init()
{
    $node = menu_get_object();
    if ($node && transcripts_node_has_transcript($node) && node_access('update', $node)) {
        // Add x-editable from CDN
        //bootstrap styles have weight -100/-99 in group CSS_THEME
        drupal_add_css('https://cdnjs.cloudflare.com/ajax/libs/x-editable/1.5.0/bootstrap3-editable/css/bootstrap-editable.css', array('type' => 'external', 'group' => CSS_THEME, 'every_page' => TRUE, 'weight' => -80));

        //bootstrap-min.js is weight -100 in group JS_THEME
        drupal_add_js('https://cdnjs.cloudflare.com/ajax/libs/x-editable/1.5.0/bootstrap3-editable/js/bootstrap-editable.min.js', array('type' => 'external', 'group' => JS_THEME, 'every_page' => TRUE, 'weight' => -80));
        drupal_add_js(drupal_get_path('module', 'transcripts_editor') . '/transcripts_editor.js', 'file');

        $exclude = array();
        foreach (module_implements('transcripts_editor_exclude_tiers') as $module) {
            $exclude = array_merge($exclude, module_invoke($module, 'transcripts_editor_exclude_tiers', $node->nid));
        }
        $exclude = array_unique($exclude);

        drupal_add_js(
            array(
                'transcripts_editor' => array(
                    'nid' => $node->nid,
                    'exclude' => $exclude,
                ),
            ),
            'setting'
        );
    }
}

function transcripts_editor_menu()
{
    $items = array();

    $items['tcu/up/tier'] = array(
        'page callback' => 'transcripts_editor_update_tier',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    return $items;
}

function transcripts_editor_update_tier()
{
    //get nid that tcu belongs to
    $tcuid = $_POST['pk'];
    $nid = transcripts_apachesolr_parent_id($tcuid);

    //does user have permissions to update tcu
    if (node_access('update', node_load($nid))) {
        $tcu = tcu_load($tcuid);
        $tier_name = $_POST['name'];
        $tier_value = $_POST['value'];
        $tcu->setTiers(array_merge($tcu->getTiers(), array($_POST['name'] => $_POST['value'])));
        tcu_save($tcu);

        //flag node as having been edited
        $flag = flag_get_flag('keep_transcript_edits');
        if ($flag && !$flag->is_flagged($nid)) {
            //must override permissions since we do not permit non-programmatic flagging
            $flag->flag('flag', $nid, NULL, TRUE);
        }

        drupal_json_output(array(
            'status' => 'success',
            'data' => array('post' => array(
                'tcuid' => $tcuid,
                'tier_name' => $tier_name,
                'tier_value' => $tier_value,
            )),
        ));
    } else {
        drupal_json_output(array(
            'status' => 'error',
            'message' => t('Sorry, you are not permitted to update this data.'),
        ));
    }
}

/**
 * Implements hook_element_info().
 */
function transcripts_editor_element_info()
{
    $elements = array();
    $elements['managed_file']['#process'][] = 'transcripts_editor_file_field_process';
    return $elements;
}

function transcripts_editor_file_field_process($element, &$form_state, $form)
{
    if (isset($element['#field_name']) && is_transcript_field($element['#field_name'])) {
        $nid = isset($form_state['node']->nid) ? $form_state['node']->nid : 0;

        $flag = flag_get_flag('keep_transcript_edits');
        if ($flag && $flag->is_flagged($nid)) {
            hide($element['remove_button']);
        }
    }
    return $element;
}